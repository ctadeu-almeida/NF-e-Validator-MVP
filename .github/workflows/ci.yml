name: CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Verify Python syntax
      run: |
        python -m py_compile app.py
        python -c "import sys; import importlib.util; print('Python syntax check passed')"

    - name: Check imports
      run: |
        python -c "import streamlit; import pandas; print('Core dependencies OK')"
        python -c "import langchain; import google.generativeai; print('AI dependencies OK')"


  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Security check with Bandit
      run: bandit -r src/ -f json -o bandit-report.json || true

    - name: Safety check for vulnerabilities
      run: safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build application
      run: |
        # Verificar se a aplicação pode ser iniciada
        python -m py_compile app.py
        echo "Build successful"

    - name: Create deployment artifact
      run: |
        tar -czf csveda-app.tar.gz src/ requirements.txt .env.example

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: csveda-build
        path: csveda-app.tar.gz